"use strict";(self.webpackChunkangular_book_github_io=self.webpackChunkangular_book_github_io||[]).push([[2977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},i="Zod for Validating Models",c={unversionedId:"Getting-Real/zod",id:"Getting-Real/zod",title:"Zod for Validating Models",description:"",source:"@site/docs/03-Getting-Real/zod.md",sourceDirName:"03-Getting-Real",slug:"/Getting-Real/zod",permalink:"/docs/Getting-Real/zod",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"realWorld",previous:{title:"NGRX Friction",permalink:"/docs/Getting-Real/redux-notes"}},s={},l=[],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"zod-for-validating-models"},"Zod for Validating Models"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { Injectable } from "@angular/core";\nimport { Actions, concatLatestFrom, createEffect, ofType } from "@ngrx/effects";\nimport { Store } from "@ngrx/store";\nimport { catchError, filter, map, of, tap } from "rxjs";\nimport { z } from "zod";\nimport { selectCountData } from "..";\nimport { CounterCommands, CounterDocuments } from "../actions/count-actions";\nimport { CountState } from "../reducers/count-reducer";\n\n@Injectable()\nexport class CounterDataEffects {\n  private readonly COUNT_DATA_KEY = "count-data";\n\n  private readonly CountDataSchema = z.object({\n    current: z.number(),\n\n    by: z.union([z.literal(1), z.literal(3), z.literal(5)]),\n  }); // CounterCommandsLoad => ?? => CounterDocuments.counter\n\n  loadCountData$ = createEffect(\n    () => {\n      return this.actions$.pipe(\n        ofType(CounterCommands.load), // we only care about this action\n        map(() => localStorage.getItem(this.COUNT_DATA_KEY)),\n        filter((x) => !!x), // stop here if we don\'t have anything in local storage\n        map((stringy) => JSON.parse(stringy || "{}") as CountState), // try to parse it with a dummy object to make TS happy\n        map((obj) => this.CountDataSchema.parse(obj) as CountState), // Zod parse, will throw if it isn\'t.\n        map((data) => CounterDocuments.counter({ payload: data })),\n        catchError((err) =>\n          of({\n            type: "error",\n            source: "counter-prefs",\n            message: "we have ourselves a hacker here!",\n            payload: err,\n          })\n        )\n      );\n    },\n    { dispatch: true }\n  );\n\n  saveCountData$ = createEffect(\n    () => {\n      return this.actions$.pipe(\n        ofType(\n          CounterCommands.countby,\n          CounterCommands.decremented,\n          CounterCommands.incremented,\n          CounterCommands.reset\n        ), // stop here if it isn\'t one of these.\n\n        concatLatestFrom(() => this.store.select(selectCountData)), // => subscribed observable of our data returned from selectCountData\n\n        map(([, data]) => JSON.stringify(data)), // turn that data into a string so I can write it local storage\n\n        tap((data) => localStorage.setItem(this.COUNT_DATA_KEY, data)) // write that sucker to localstorage\n      );\n    },\n    { dispatch: false }\n  ); // whatever emerges here has to be action, and it is sent to the store.\n\n  constructor(private actions$: Actions, private store: Store) {}\n}\n')))}m.isMDXComponent=!0}}]);