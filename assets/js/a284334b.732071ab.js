"use strict";(self.webpackChunkangular_book_github_io=self.webpackChunkangular_book_github_io||[]).push([[7639],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),g=a,d=u["".concat(p,".").concat(g)]||u[g]||y[g]||s;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9902:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={},o="Extending Interfaces or Types",i={unversionedId:"Getting-Real/TypeScript/extending-types",id:"Getting-Real/TypeScript/extending-types",title:"Extending Interfaces or Types",description:"Let's say you have two things - an employee and a retiree.",source:"@site/docs/03-Getting-Real/02-TypeScript/11-extending-types.md",sourceDirName:"03-Getting-Real/02-TypeScript",slug:"/Getting-Real/TypeScript/extending-types",permalink:"/docs/Getting-Real/TypeScript/extending-types",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"realWorld",previous:{title:"TypeScript Tagged Union Type",permalink:"/docs/Getting-Real/TypeScript/types-tagged"},next:{title:"Unknown in TypeScript",permalink:"/docs/Getting-Real/TypeScript/unknown"}},p={},l=[{value:"Tagged Union Types and Switch",id:"tagged-union-types-and-switch",level:3}],c={toc:l},u="wrapper";function y(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"extending-interfaces-or-types"},"Extending Interfaces or Types"),(0,a.kt)("p",null,"Let's say you have two things - an employee and a retiree.\nBoth are a person, one has a salary, one has a pension."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'type Person = {\n  name: string;\n};\n\ntype Employee = Person & {\n  salary: number;\n\n  pension?: never;\n};\n\ntype Retiree = Person & {\n  pension: number;\n\n  salary?: never;\n};\n\ntype Worker = Employee | Retiree;\n\nconst joe: Worker = {\n  name: "Joe\xa0Smith",\n\n  salary: 50000, //\xa0\xa0pension:\xa030000\n};\n\nfunction giveRaise(w: Worker): Worker {\n  if (w.pension) {\n    return {\n      ...w,\n\n      pension: w.pension * 1.1,\n    } as Retiree;\n  } else {\n    return {\n      ...w,\n\n      salary: w.salary * 1.1,\n    } as Employee;\n  }\n}\n')),(0,a.kt)("h3",{id:"tagged-union-types-and-switch"},"Tagged Union Types and Switch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'type SuccessResult<T> = {\n  status: "OK";\n\n  value: T;\n};\n\ntype ErrorResult = {\n  status: "FAIL";\n\n  message: string;\n};\n\ntype MaybeResult = {\n  status: "Maybe";\n};\n\ntype Result<T> = SuccessResult<T> | ErrorResult; //\xa0add\xa0MaybeResult\xa0here\nconst r1: Result<string> = {\n  status: "OK",\n\n  value: "Tacos",\n};\n\nconst r2: Result<string> = {\n  status: "FAIL",\n\n  message: "Fail\xa0whale!",\n};\n\nfunction handleIt(h: Result<string>) {\n  switch (h.status) {\n    case "OK": {\n      return "It\xa0is\xa0ok,\xa0and\xa0has\xa0" + h.value;\n    }\n\n    case "FAIL": {\n      return "It\xa0failed\xa0with\xa0message" + h.message;\n    }\n\n    default: {\n      const x: never = h;\n    }\n  }\n}\n')))}y.isMDXComponent=!0}}]);